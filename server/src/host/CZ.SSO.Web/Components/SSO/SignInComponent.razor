@using Microsoft.JSInterop
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JSRuntime

<link rel="stylesheet" href="/signin.css" />

<div class="container">
    <div class="controls">
        <div class="controls-switcher">
            <button id="langToggle" class="toggle-btn" @onclick="ToggleLanguage">@currentLang.ToUpper()</button>
            <button id="themeToggle" class="toggle-btn" @onclick="ToggleTheme">
                <img src="@GetThemeIconPath()" class="icon icon-sun" alt="Theme toggle">
            </button>
        </div>
    </div>
    
    <div class="signin-container">
        <div class="signin-header">
            <div class="logo">
                <img src="@GetIconPath("blog.svg")" class="icon icon-blog" alt="Blog icon">
                <span>@Translations["brand-name"]</span>
            </div>
            <h1>@Translations["welcome-title"]</h1>
            <p>@Translations["welcome-subtitle"]</p>
        </div>
        
        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
            <DataAnnotationsValidator />
            
            <div class="form-group">
                <label for="email">@Translations["email-label"]</label>
                <InputText id="email" class="form-control" @bind-Value="loginModel.Email" placeholder="@Translations["email-placeholder"]" />
                <ValidationMessage For="@(() => loginModel.Email)" class="error-message" />
            </div>
            
            <div class="form-group">
                <label for="password">@Translations["password-label"]</label>
                <div class="password-input">
                    <InputText type="@passwordType" id="password" class="form-control" @bind-Value="loginModel.Password" placeholder="@Translations["password-placeholder"]" />
                    <button type="button" class="toggle-password" @onclick="TogglePasswordVisibility">
                        <img src="@GetIconPath("eye.svg")" class="icon icon-eye" alt="Toggle password visibility">
                    </button>
                </div>
                <ValidationMessage For="@(() => loginModel.Password)" class="error-message" />
            </div>
            
            <div class="form-options">
                <div class="remember-me">
                    <InputCheckbox id="remember" @bind-Value="loginModel.RememberMe" />
                    <label for="remember">@Translations["remember-me"]</label>
                </div>
                <a href="#" class="forgot-password" @onclick="ForgotPassword">@Translations["forgot-password"]</a>
            </div>
            
            <button type="submit" class="signin-button">@Translations["signin-button"]</button>
            
            <div class="divider">
                <span>@Translations["or-continue"]</span>
            </div>
            
            <div class="social-login">
                <button type="button" class="social-button google" @onclick="GoogleLogin">
                    <img src="@GetIconPath("google.svg")" class="icon icon-google" alt="Google"> <span>@Translations["google"]</span>
                </button>
                <button type="button" class="social-button github" @onclick="GithubLogin">
                    <img src="@GetIconPath("github.svg")" class="icon icon-github" alt="GitHub"> <span>@Translations["github"]</span>
                </button>
            </div>
        </EditForm>
        
        <div class="signup-link">
            <p>@Translations["no-account"] <a href="#" @onclick="SignUp">@Translations["signup-link"]</a></p>
        </div>
    </div>
    
    <div class="image-container">
        <div class="image-overlay">
            <div class="overlay-content">
                <h2>@Translations["discover-title"]</h2>
                <p>@Translations["discover-subtitle"]</p>
            </div>
        </div>
    </div>
</div>

<style>
    /* CSS styles will be added here */
</style>

@code {
    private LoginModel loginModel = new();
    private string currentLang = "en";
    private string currentTheme = "light";
    private string passwordType = "password";
    
    private Dictionary<string, string> Translations = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadTranslations();
        await LoadPreferences();
    }
    
    private async Task LoadTranslations()
    {
        // Default English translations
        Translations = new Dictionary<string, string>
        {
            { "brand-name", "MyBlog" },
            { "welcome-title", "Welcome back" },
            { "welcome-subtitle", "Sign in to access your blog posts and projects" },
            { "email-label", "Email address" },
            { "email-placeholder", "Enter your email" },
            { "password-label", "Password" },
            { "password-placeholder", "Enter your password" },
            { "remember-me", "Remember me" },
            { "forgot-password", "Forgot password?" },
            { "signin-button", "Sign In" },
            { "or-continue", "or continue with" },
            { "google", "Google" },
            { "github", "GitHub" },
            { "no-account", "Don't have an account? " },
            { "signup-link", "Sign up" },
            { "discover-title", "Explore My Blog & Projects" },
            { "discover-subtitle", "Join the community to read articles, explore projects, and share your thoughts with others." }
        };
        
        // If language is Chinese, update translations
        if (currentLang == "zh")
        {
            Translations = new Dictionary<string, string>
            {
                { "brand-name", "我的博客" },
                { "welcome-title", "欢迎回来" },
                { "welcome-subtitle", "登录以访问您的博客文章和项目" },
                { "email-label", "电子邮箱" },
                { "email-placeholder", "请输入您的电子邮箱" },
                { "password-label", "密码" },
                { "password-placeholder", "请输入您的密码" },
                { "remember-me", "记住我" },
                { "forgot-password", "忘记密码？" },
                { "signin-button", "登录" },
                { "or-continue", "或继续使用" },
                { "google", "谷歌" },
                { "github", "GitHub" },
                { "no-account", "还没有账户？" },
                { "signup-link", "注册" },
                { "discover-title", "探索我的博客和项目" },
                { "discover-subtitle", "加入社区，阅读文章，探索项目，与他人分享您的想法。" }
            };
        }
        
        StateHasChanged();
    }
    
    private async Task LoadPreferences()
    {
        try 
        {
            // Load saved preferences from localStorage via JS interop
            currentLang = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "preferred-language") ?? "en";
            currentTheme = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "preferred-theme") ?? "light";
            
            await LoadTranslations();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading preferences: {ex.Message}");
            // Set default values if JS interop fails
            currentLang = "en";
            currentTheme = "light";
            await LoadTranslations();
        }
    }
    
    private async Task ToggleLanguage()
    {
        try
        {
            currentLang = currentLang == "en" ? "zh" : "en";
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "preferred-language", currentLang);
            await LoadTranslations();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling language: {ex.Message}");
            await LoadTranslations();
        }
    }
    
    private async Task ToggleTheme()
    {
        try
        {
            currentTheme = currentTheme == "light" ? "dark" : "light";
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "preferred-theme", currentTheme);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling theme: {ex.Message}");
            StateHasChanged();
        }
    }
    
    private void TogglePasswordVisibility()
    {
        passwordType = passwordType == "password" ? "text" : "password";
    }
    
    private string GetThemeIconPath()
    {
        return GetIconPath(currentTheme == "light" ? "sun.svg" : "moon.svg");
    }
    
    private string GetIconPath(string iconName)
    {
        return $"./icons/{currentTheme}/{iconName}";
    }
    
    private async Task HandleLogin()
    {
        try
        {
            // Implement login logic here
            Console.WriteLine($"Login attempt: {loginModel.Email}");
            
            // For demo purposes, just show a success message
            await JSRuntime.InvokeVoidAsync("alert", "Login successful! Redirecting...");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during login: {ex.Message}");
            // Fallback to a simple console message if JS interop fails
            Console.WriteLine("Login successful! Redirecting...");
        }
    }
    
    private async Task ForgotPassword()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("alert", "Password reset link would be sent to your email");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in forgot password: {ex.Message}");
            Console.WriteLine("Password reset link would be sent to your email");
        }
    }
    
    private async Task GoogleLogin()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("alert", "Redirecting to Google login...");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in Google login: {ex.Message}");
            Console.WriteLine("Redirecting to Google login...");
        }
    }
    
    private async Task GithubLogin()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("alert", "Redirecting to GitHub login...");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in GitHub login: {ex.Message}");
            Console.WriteLine("Redirecting to GitHub login...");
        }
    }
    
    private async Task SignUp()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("alert", "Redirecting to signup page...");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in signup: {ex.Message}");
            Console.WriteLine("Redirecting to signup page...");
        }
    }
    
    public class LoginModel
    {
        [Required(ErrorMessage = "Email address is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = "";
        
        [Required(ErrorMessage = "Password is required")]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters")]
        public string Password { get; set; } = "";
        
        public bool RememberMe { get; set; }
    }
}
